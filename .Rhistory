x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point(position = position_jitter(width = 0.3,
height = 0.06),
alpha = 0.4,
shape = 21,
size = 1.5)+
stat_smooth(method = lm,
family = binomial)
x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point(position = position_jitter(width = 0.3,
height = 0.06),
alpha = 0.4,
shape = 21,
size = 1.5)+
stat_smooth(method = glm,
family = binomial)
ggplot(x, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=0.3, height=0.06), alpha=0.4,
shape=21, size=1.5) +
stat_smooth(method=glm, family=binomial)
x <- heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn,
colour = sex
))+
geom_point()+
scale_color_brewer(palette = "Set1")
x + geom_smooth()
x + geom_smooth(method = lm,
se = FALSE,
fullrange = TRUE)
x <- lm(heightIn ~ ageYear + I(ageyear ^2), data = heightweight)
x <- lm(heightIn ~ ageYear + I(ageYear ^2), data = heightweight)
x
#Cree un marco de datos con la columna ageYear, interpolando a través del rango
xmin <- min(heightweight$ageYear)
predicted <- data.frame(ageYear = seq(xmin, xmax, length.out = 100))
xmax <- max(heightweight$ageYear)
predicted <- data.frame(ageYear = seq(xmin, xmax, length.out = 100))
#Calcular los valores predichos de heightIn
predicted$heightIn <- predict(model, predicted)
#Calcular los valores predichos de heightIn
predicted$heightIn <- predict(x, predicted)
predicted
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point(colour = "grey50")
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point(colour = "grey50")+
geom_line(data = predict, size = 2)
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point(colour = "grey50")+
geom_line(data = predicted, size = 2)
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
modlinear <- lm(heightIn ~ ageYear, heightweight)
modloess <- loess(heightIn ~ ageYear, heightweight)
lm_predicted <- predictvals(modlinear, "ageYear", "heightIn")
loess_predicted <- predictvals(modloess, "ageYear", "heightIn")
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_line(data = lm_predicted,
colour = "red",
size = 0.8)+
geom_line(data = loess_predicted,
colour = "blue",
size = 1)
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point(colour = "grey50")+
geom_line(data = predicted, size = 2)
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point(colour = "grey50")+
geom_line(data = lm_predicted,
colour = "red",
size = 0.8)+
geom_line(data = loess_predicted,
colour = "blue",
size = 1)
x <- biopsy
x$classn[x$class == "beningn"] <- 0
x$classn[x$class == "malignant"] <- 1
fitlogistic <- glm(classn ~ V1,
data = x,
family = binomial)
x <- biopsy
x$classn[x$class == "beningn"] <- 0
x$classn[x$class == "malignant"] <- 1
fitlogistic <- glm(classn ~ V1,
data = x,
family = binomial)
glm_predicted <- predictvals(fitlogistic, "V1", "classn", type="response")
x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point()
x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point(position = position_jitter(width = .3,
height = .08),
alpha = 0.4,
shape = 21,
size = 1.5)
x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point(position = position_jitter(width = .3,
height = .08),
alpha = 0.4,
shape = 21,
size = 1.5)+
geom_line(data = glm_predicted,
colour = "#fc9272",
size = 1)
ggplot(x, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=.3, height=.08), alpha=0.4,
shape=21, size=1.5) +
geom_line(data=glm_predicted, colour="#1177FF", size=1)
x %>%
ggplot(aes(
x = V1,
y = classn
))+
geom_point(position = position_jitter(width = .3,
height = .08),
alpha = 0.4,
shape = 21,
size = 1.5)+
geom_line(data = glm_predicted,
colour = "#fc9272",
size = 1)
make_model <- function(data){
lm(heightIn ~ ageYear, data)
}
models <- dlply(heightweight, "sex", .fun = make_model())
models <- dlply(heightweight, "sex", .fun = make_model)
models
predvals <- ldply(models, .fun = predictvals, xvar = "ageYear", yvar = "heightIn")
predvals
#Finalmente, podemos graficar los datos con los valores predichos
heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn,
colour = sex
))+
geom_point()+
geom_line(data = predvals)
predvals <- ldply(models,
.fun = predictvals,
xvar = "ageYear",
yvar = "heightIng",
xrange = range(heightweight$ageYear))
heightweight %>%
ggplot(aes(
x =  ageYear,
y =  heightIn,
colour = sex
))+
geom_point(size = 1.2)+
geom_line(data = predvals)
heightweight %>%
ggplot(aes(
x =  ageYear,
y =  heightIn,
colour = sex
))+
geom_point(size = 1.2)+
geom_line(data = predvals)
predvals <- ldply(models,
.fun = predictvals,
xvar = "ageYear",
yvar = "heightIn",
xrange = range(heightweight$ageYear))
heightweight %>%
ggplot(aes(
x =  ageYear,
y =  heightIn,
colour = sex
))+
geom_point(size = 1.2)+
geom_line(data = predvals)
model <- lm(heightIn ~ ageYear, data = heightweight)
summary(model)
# Primero generar datos de predicción
pred <- predictvals(model, "ageYear", "heightIn")
pred
x <- heightweight %>%
ggplot(aes(
x = ageYear,
y = heightIn
))+
geom_point()+
geom_line(data = pred)
x + annotate("text",
label = "r^2 = 0.4249",
x = 16.5,
y=52)
x + annotate("text",
label = "r^2=0.4249",
parse = TRUE,
x = 16.5,
y=52)
x + annotate("text",
label = "r^2==0.4249",
parse = TRUE,
x = 16.5,
y=52)
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
eqn <- as.character(as.expression(
substitute(italic(y) == a + b * italic(x) * "," ~~ italic(r)^2 ~ "=" ~ r2,
list(a = format(coef(model)[1], digits=3),
b = format(coef(model)[2], digits=3),
r2 = format(summary(model)$r.squared, digits=2)
))))
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
parse(text = eqn)
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
eqn
x + annotate("text",
label = "r^2==0.4249",
parse = TRUE,
x = 16.5,
y=52)
eqn <- as.character(as.expression(
substitute(italic(y) == a + b * italic(x) * "," ~~ italic(r)^2 ~ "=" ~ r2,
list(a = format(coef(model)[1], digits=3),
b = format(coef(model)[2], digits=3),
r2 = format(summary(model)$r.squared, digits=2)
))))
eqn
parse(text = eqn)
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
x + annotate("text",
label = eqn,
parse=FALSE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
eqn
parse(text = eqn)
x + annotate("text",
label = eqn,
parse=TRUE,
x = Inf,
y = -Inf,
hjust = 1.1,
vjust = -.5)
View(faithful)
str(faithful)
faithful %>%
ggplot(aes(
x = eruptions,
y = waiting
))+
geom_point()+
geom_rug()
# Un diagrama de alfombra marginal es esencialmente un diagrama de dispersión
# unidimensional que se puede usar para visualizar la distribución de datos
# en cada eje.
faithful %>%
ggplot(aes(
x = eruptions,
y = waiting
))+
geom_point()+
geom_rug(position = "jitter", size = 0.2)
view(countries)
str(countries)
x <-subset(countries, Year == 2009 & healthexp > 2000)
str(x)
y <- x %>%
ggplot(aes(
x = healthexp,
y = infmortality
))+
geom_point()
y + annotate("text",
x = 4350,
y = 5.4,
label = "Canada")+
annotate("text",
x = 7400,
y = 6.8,
label = "USA")
View(x)
y + geom_text(aes(
label = Name
),
size = 2)
y + geom_text(aes(
label = Name
),
size = 4)
y + geom_text(aes(
label = Name
),
size = 4,
vjust = 0)
y + geom_text(aes(
y = infmortality+.1,
label =Name
),
size = 4,
vjust = 0)
y + geom_text(aes(
label = Name
),
size = 4,
vjust = 0)
y + geom_text(aes(
x = healthexp+100,
label = Name
),
size = 4,
hjust = 0)
x <- subset(countries, Year == 2009 & healthexp > 2000)
x$myName <- x$Name
str(x)
idx <- x$myName %in% c("Canada", "Ireland", "United Kingdom", "United States",
"New Zealand", "Iceland", "Japan", "Luxembourg",
"Netherlands", "Switzerland")
idx
x$myName[!idx] <-NA
x
x %>%
ggplot(aes(
x = healthexp,
y = infmortality
))+
geom_point()+
geom_text(aes(
x = healthexp+100,
label = myName
), size = 4,
hjust = 0)+
xlim(2000,10000)
x <- cdat <- subset(countries, Year==2009 &
Name %in% c("Canada", "Ireland", "United Kingdom", "United States",
"New Zealand", "Iceland", "Japan", "Luxembourg",
"Netherlands", "Switzerland"))
str(x)
head(x, 7)
x <- subset(countries, Year==2009 &
Name %in% c("Canada", "Ireland", "United Kingdom", "United States",
"New Zealand", "Iceland", "Japan", "Luxembourg",
"Netherlands", "Switzerland"))
str(x)
head(x, 7)
y <- x %>%
ggplot(aes(
x = healthexp,
y = infmortality,
size = GDP
))+
geom_point(shape = 21,
colour = "black",
fill = "cornsilk")
y
y + scale_size_area(max_size = 15)
y
y + scale_size_area(max_size = 15)
view(HairEyeColor)
hec <- HairEyeColor[,,"Male"]+HairEyeColor[,,"Female"]
view(hec)
install.packages("reshape2")
library(reshape2)
hec <- melt(hec, value.name = "count")
hec
hec %>%
ggplot(aes(
x=Eye,
y=Hair
))+
geom_point(aes(
size=count
),
shape=21,
colour="black",
fill="cornsilk"
)+
scale_size_area(max_size=20,
guide=FALSE) +
geom_text(aes(
y = as.numeric(Hair)-sqrt(count)/22,
label = count),
vjust=1,
colour="grey60",
size=4)
x <- subset(countries, Year == 2009,
select = c(Name, GDP, laborrate, healthexp, infmortality))
x
str(x)
pairs(x[, 2:5])
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}
pairs(x[,2:5], upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.smooth)
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "black", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(stats::lm(y ~ x), col = col.smooth, ...)
}
pairs(c2009[,2:5], pch=".",
upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.lm)
pairs(x[,2:5], pch=".",
upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.lm)
