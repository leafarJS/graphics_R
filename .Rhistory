beside = TRUE,
legend.text = rownames(raza_peso))
barplot(raza_peso_prop,
beside = TRUE,
legend.text = rownames(raza_peso),
main = "Gráfico de Mosaico",
col = c("red","yellow", "green")))
barplot(raza_peso_prop,
beside = TRUE,
legend.text = rownames(raza_peso),
main = "Gráfico de Mosaico",
col = c("red","yellow", "green"))
fumar_peso = table(smoke, low)
fumar_peso
fumar_peso = table(smoke, low)
fumar_peso
colnames(fumar_peso) = c(">2.5", "<2.5")
rownames(fumar_peso) = c("Si", "No")
fumar_peso
barplot(fumar_peso_prop)
rownames(fumar_peso) = c("Si", "No")
fumar_peso
fumar_peso_prop = prop.table(fumar_peso, margin = NULL)
barplot(fumar_peso_prop)
barplot(fumar_peso_prop,
beside = TRUE)
barplot(fumar_peso_prop,
beside = TRUE,
legend.text = row.names(fumar_peso))
barplot(fumar_peso_prop,
beside = TRUE,
legend.text = row.names(fumar_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
plot(fumar_peso_prop,
main = "Gráfico de Mosaico",
col = c("red","blue"))
barplot(fumar_peso_prop,
beside = TRUE,
legend.text = row.names(fumar_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
barplot(fumar_peso_prop,
beside = TRUE,
legend.text = row.names(fumar_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
hiper_peso = table(ht, low)
hiper_peso
colnames(hiper_peso) = c(">2.5", "<2.5")
rownames(hiper_peso) = c("Si", "No")
hiper_peso
hiper_peso_prop
hiper_peso_prop = prop.table(hiper_peso, margin = NULL)
hiper_peso_prop
plot(hiper_peso_prop,
main = "Gráfico de Mosaico",
col = c("red","blue"))
plot(hiper_peso_prop,
main = "Gráfico de Mosaico",
col = c("red","blue"))
barplot(hiper_peso_prop,
beside = TRUE,
legend.text = row.names(fumar_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
barplot(hiper_peso_prop,
beside = TRUE,
legend.text = row.names(hiper_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
hiper_peso_prop = prop.table(hiper_peso, margin = 1)
hiper_peso_prop
plot(hiper_peso_prop,
main = "Gráfico de Mosaico",
col = c("red","blue"))
barplot(hiper_peso_prop,
beside = TRUE,
legend.text = row.names(hiper_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
plot(hiper_peso_prop)
range(ht)
plot(hiper_peso_prop,
ylim = 1
main = "Gráfico de Mosaico",
plot(hiper_peso_prop,
ylim = 1,
main = "Gráfico de Mosaico",
col = c("red","blue"))
prop.table(table(birthwt[c("smoke", "low", "race")]))
prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(1,3))
prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = 1)
race = factor(race,
levels = c(1,2,3),
labels = c("blanco", "negro", "otras"))
low = factor(low,
levels = c(0,1),
labels = c(">2.5", "<2.5"))
birthwt
str(birthwt)
birthwt$race = factor(race,
levels = c(1,2,3),
labels = c("blanco", "negro", "otras"))
birthwt$smoke = factor(smoke,
levels = c(0,1),
labels = c("No", "yes"))
birthwt$low = factor(low,
levels = c(0,1),
labels = c(">2.5", "<2.5"))
str(birthwt)
prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = 1)
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = 1)
plot(smoke_low_race)
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(1, 3))
plot(smoke_low_race)
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = 1)
plot(smoke_low_race,
main = "Gráfico de Mosaico",
col = c("red","yellow", "green"))
birthwt$race = factor(birthwt$race,
levels = c(1, 2, 3),
labels = c("white", "black", "other"))
birthwt$smoke = factor(birthwt$smoke,
levels = c(0, 1),
labels = c("No", "Yes"))
birthwt$low = factor(birthwt$low,
levels = c(0, 1),
labels = c(">2.5", "<2.5"))
plot(prop.table(table(birthwt[c("smoke", "low", "race")]), margin = c(1, 3)),
main = "Gráfico de mosaico de las variables \"race\", \"smoke\" y \"low\"",
col = c("lightgreen","lightblue", "pink"))
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(0,3))
plot(smoke_low_race,
main = "Gráfico de Mosaico",
col = c("red","yellow", "green"))
prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(0,2))
hiper_peso_prop = prop.table(hiper_peso, margin = 0)
hiper_peso_prop
plot(hiper_peso_prop,
main = "Gráfico de Mosaico",
col = c("red","blue"))
barplot(hiper_peso_prop,
beside = TRUE,
legend.text = row.names(hiper_peso),
main = "Gráfico de Barras",
col = c("red","yellow"))
prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(0,2))
birthwt$race = factor(race,
levels = c(1,2,3),
labels = c("blanco", "negro", "otras"))
birthwt$smoke = factor(smoke,
levels = c(0,1),
labels = c("No", "yes"))
birthwt$low = factor(low,
levels = c(0,1),
labels = c(">2.5", "<2.5"))
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = c(0,3))
plot(smoke_low_race,
main = "Gráfico de Mosaico",
col = c("red","yellow", "green"))
smoke_low_race = prop.table(table(birthwt[c("smoke", "low", "race")]),
margin = 0)
plot(smoke_low_race,
main = "Gráfico de Mosaico",
col = c("red","yellow", "green"))
View(DNase)
barplot(table(DNase$density), beside = TRUE)
barplot(table(DNase$density), beside = TRUE)
data = read.table("grades.txt", header = TRUE)
View(data)
data = read.table("grades.txt", header = TRUE)
View(data)
str(data)
data = read.table("grades.txt", header = FALSE, sep = "", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss" ),
row.names, col.names, as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 0, check.names = TRUE, fill = !blank.lines .skip,
data = read.table("grades.txt", header = FALSE, sep = "", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss" ),
row.names, col.names, as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 0, check.names = TRUE,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", codificación = "desconocido ", texto, skipNul = FALSO)
View(data)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
read.table("grades.txt", header = FALSE, sep = "", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names, as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 0, check.names = TRUE, fill = !blank.lines.skip,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown", text, skipNul = FALSE)
View(data)
str(data)
read.table("grades.txt", header = FALSE, sep = "", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names, as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 0, check.names = TRUE, fill = !blank.lines.skip,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "utf-8", text, skipNul = FALSE)
View(data)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
library(tidyverse)
library(ggplot2)
library(gcookbook)
library(plyr)
pdf("plot_1.pdf", width = 4, height = 4)
#make plots
plot(mtcars$wt, mtcars$mpg)
print(mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point())
dev.off()
# 8 x 8 cm
pdf("plot_1.pdf", width = 8/2.54, height = 8/2.54)
pdf("plot_1.pdf", width = 4, height = 4)
#make plots
plot(mtcars$wt, mtcars$mpg)
print(mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point())
dev.off()
# Si crea más de un diagrama, cada uno irá en una página separada en la salida
# del PDF. Tenga en cuenta que llamamos a print() en el objeto ggplot para
# asegurarnos de que se generará incluso cuando este código esté en un script.
# El ancho y el alto están en pulgadas, por lo que para especificar las dimensiones
# en centímetros, debes hacer la conversión manualmente:
# 8 x 8 cm
pdf("plot_2.pdf", width = 8/2.54, height = 8/2.54)
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point()
ggsave("plot_2.pdf", width = 8, height = 8, units = "cm")
win.metafile("plot_3.wmf",
width = 4,
height = 4)
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
fill = mpg
win.metafile("plot_3.wmf",
width = 4,
height = 4)
win.metafile("plot_3.wmf",
width = 4,
height = 4)
pdf("plot_1.pdf",
width = 4,
height = 4,
useDingbats = FALSE)
#OR
ggsave("plot_1.pdf",
width = 4,
height = 4,
useDingbats = FALSE)
png("plot_4.png",
width = 400,
height = 400)
#make plot
plot(mtcars$wt,
mtcars$mpg)
dev.off()
png("plot_5-%d.png",
width = 400,
height = 400)
#make plot
plot(mtcars$mpg,
mtcars$wt)
print(mtcars %>%
ggplot(aes(
x = wt,
y = mpg
)))+
geom_point()
dev.off()
ppi <- 300
# Calculate the height and width (in pixels) for a 4x4-inch image at 300 ppi
png("plot_6.png",
width = 4 * ppi,
height = 4 * ppi,
res = ppi)
plot(mtcars$wt,
mtcars$mpg)
dev.off()
mtcars %>%
ggplot(aes(
x=wt,
y=mpg))
+ geom_point()
mtcars %>%
ggplot(aes(
x=wt,
y=mpg))
+ geom_point()
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point()
# Default dimensions are in inches, but you can specify the unit
ggsave("plot_7.png",
width = 8,
height = 8,
unit = "cm",
dpi = 300)
install.packages("Cairo")
#install.packages("Cairo")
library(Cairo)
library(Cairo)
CairoPNG("plot_8.png")
plot(mtcars$mpg, mtcars$wt)
dev.off()
install.packages("extrafont")
library(extrafont)
#install.packages("extrafont")
library(extrafont)
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
font_import()
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
fonts()
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
# En Windows, es posible que deba indicarle dónde está instalado Ghostscript
# (ajuste la ruta para que coincida con su instalación de Ghostscript)
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
#library(ggplot2)
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point()+
ggtitle("El texto del titulo va aqui")+
theme(text = element_text(size = 16,
family = "Impact"))
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point()+
ggtitle("El texto del titulo va aqui")+
theme(text = element_text(size = 16,
family = "Impact"))
Yy
library(extrafont)
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
fonts()
loadfonts()
install.packages("extrafont")
library(extrafont)
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
fonts()
install.packages("extrafont")
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
library(extrafont)
loadfonts()
# En Windows, es posible que deba indicarle dónde está instalado Ghostscript
# (ajuste la ruta para que coincida con su instalación de Ghostscript)
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
ggsave("plot_9.pdf",
width = 4,
height = 4)
#library(ggplot2)
mtcars %>%
ggplot(aes(
x = wt,
y = mpg
))+
geom_point()+
ggtitle("El texto del titulo va aqui")+
theme(text = element_text(size = 16,
family = "Impact"))
ggplot(mtcars, aes(
x = wt,
y = mpg
))+
geom_point()+
ggtitle("El texto del titulo va aqui")+
theme(text = element_text(size = 16,
family = "Impact"))
#
library(ggplot2)
ggplot(mtcars, aes(
x = wt,
y = mpg
))+
geom_point()+
ggtitle("El texto del titulo va aqui")+
theme(text = element_text(size = 16,
family = "Impact"))
ggsave("plot_9.pdf",
width = 4,
height = 4)
embed_fonts("plot_9.pdf")
library(extrafont)
fonts()
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
# Busque y guarde información sobre las fuentes instaladas en su sistema
font_import()
library(extrafont)
# Find and save information about fonts installed on your system
font_import()
# List the fonts
fonts()
library(extrafont)
# Register the fonts for Windows
loadfonts("win")
library(ggplot2)
ggplot(mtcars,
aes(
x = wt,
y = mpg))+
geom_point()+
ggtitle("Title text goes here") +
theme(text = element_text(size = 16,
family="Georgia",
face="italic"))
ggsave("plot_10.png",
width = 4,
height = 4,
dpi = 300)
install.packages("extrafont")
library(extrafont)
# Find and save information about fonts installed on your system
font_import()
# List the fonts
fonts()
library(extrafont)
# Register the fonts for Windows
loadfonts("win")
library(ggplot2)
ggplot(mtcars,
aes(
x = wt,
y = mpg))+
geom_point()+
ggtitle("Title text goes here") +
theme(text = element_text(size = 16,
family="Georgia",
face="italic"))
ggsave("plot_10.png",
width = 4,
height = 4,
dpi = 300)
install.packages("extrafont")
# List the fonts
fonts()
library(extrafont)
# Find and save information about fonts installed on your system
font_import()
# List the fonts
fonts()
# Find and save information about fonts installed on your system
font_import()
loadfonts("win")
library(ggplot2)
ggplot(mtcars,
aes(
x = wt,
y = mpg))+
geom_point()+
ggtitle("Title text goes here") +
theme(text = element_text(size = 16,
family="Georgia",
face="italic"))
ggsave("plot_10.png",
width = 4,
height = 4,
dpi = 300)
